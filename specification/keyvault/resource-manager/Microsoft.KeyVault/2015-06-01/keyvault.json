{
  "swagger": "2.0",
  "info": {
    "title": "KeyVaultManagementClient",
    "description": "The Azure management API provides a RESTful set of web services that interact with Azure Key Vault.",
    "version": "2015-06-01"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}": {
      "put": {
        "tags": [
          "Vaults"
        ],
        "operationId": "Vaults_CreateOrUpdate",
        "description": "Create or update a key vault in the specified subscription.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the Resource Group to which the server belongs."
          },
          {
            "name": "vaultName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "description": "Name of the vault"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VaultCreateOrUpdateParameters"
            },
            "description": "Parameters to create or update the vault"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Created or updated vault",
            "schema": {
              "$ref": "#/definitions/Vault"
            }
          },
          "200": {
            "description": "Created or updated vault",
            "schema": {
              "$ref": "#/definitions/Vault"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Vaults"
        ],
        "operationId": "Vaults_Patch",
        "description": "Patch a key vault in the specified subscription.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the Resource Group to which the server belongs."
          },
          {
            "name": "vaultName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "description": "Name of the vault"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VaultPatchParameters"
            },
            "description": "Parameters to patch the vault"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Patched vault",
            "schema": {
              "$ref": "#/definitions/Vault"
            }
          },
          "200": {
            "description": "Patched vault",
            "schema": {
              "$ref": "#/definitions/Vault"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Vaults"
        ],
        "operationId": "Vaults_Delete",
        "description": "Deletes the specified Azure key vault.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the Resource Group to which the vault belongs."
          },
          {
            "name": "vaultName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the vault to delete"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK Response."
          }
        }
      },
      "get": {
        "tags": [
          "Vaults"
        ],
        "operationId": "Vaults_Get",
        "description": "Gets the specified Azure key vault.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the Resource Group to which the vault belongs."
          },
          {
            "name": "vaultName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the vault."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved vault",
            "schema": {
              "$ref": "#/definitions/Vault"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/accessPolicies/add": {
      "put": {
        "tags": [
          "Vaults"
        ],
        "operationId": "Vaults_MergeAccessPolicy",
        "description": "Merge access policies into a key vault in the specified subscription.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the Resource Group to which the vault belongs."
          },
          {
            "name": "vaultName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "description": "Name of the vault"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VaultAccessPolicyParameters"
            },
            "description": "Access policy to merge into the vault"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated vault",
            "schema": {
              "$ref": "#/definitions/Vault"
            }
          },
          "200": {
            "description": "Updated vault",
            "schema": {
              "$ref": "#/definitions/Vault"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/accessPolicies/replace": {
      "put": {
        "tags": [
          "Vaults"
        ],
        "operationId": "Vaults_ReplaceAccessPolicy",
        "description": "Replace access policies in a key vault in the specified subscription.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the Resource Group to which the vault belongs."
          },
          {
            "name": "vaultName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "description": "Name of the vault"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VaultAccessPolicyParameters"
            },
            "description": "Access policy to replace in the vault"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated vault",
            "schema": {
              "$ref": "#/definitions/Vault"
            }
          },
          "200": {
            "description": "Updated vault",
            "schema": {
              "$ref": "#/definitions/Vault"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/accessPolicies/remove": {
      "put": {
        "tags": [
          "Vaults"
        ],
        "operationId": "Vaults_RemoveAccessPolicy",
        "description": "Remove access policies from a key vault in the specified subscription.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the Resource Group to which the vault belongs."
          },
          {
            "name": "vaultName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "description": "Name of the vault"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VaultAccessPolicyParameters"
            },
            "description": "Access policy to remove from the vault"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Updated vault",
            "schema": {
              "$ref": "#/definitions/Vault"
            }
          },
          "200": {
            "description": "Updated vault",
            "schema": {
              "$ref": "#/definitions/Vault"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults": {
      "get": {
        "tags": [
          "Vaults"
        ],
        "operationId": "Vaults_ListByResourceGroup",
        "description": "The List operation gets information about the vaults associated with the subscription and within the specified resource group.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the Resource Group to which the vault belongs."
          },
          {
            "name": "$top",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to return."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Get information about all key vaults in the specified resource group.",
            "schema": {
              "$ref": "#/definitions/VaultListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/vaults": {
      "get": {
        "tags": [
          "Vaults"
        ],
        "operationId": "Vaults_ListBySubscription",
        "description": "The List operation gets information about the vaults associated with the subscription.",
        "parameters": [
          {
            "name": "$top",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to return."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Get information about all key vaults in the specified subscription.",
            "schema": {
              "$ref": "#/definitions/VaultListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resources": {
      "get": {
        "tags": [
          "Vaults"
        ],
        "operationId": "Vaults_List",
        "description": "The List operation gets information about the vaults associated with the subscription.",
        "parameters": [
          {
            "name": "$filter",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [ "resourceType eq 'Microsoft.KeyVault/vaults'" ],
            "description": "The filter to apply on the operation."
          },
          {
            "name": "$top",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to return."
          },
          {
            "name": "api-version",
            "in": "query",
            "required": true,
            "type": "string",
            "enum": [ "2015-11-01" ],
            "description": "Azure Resource Manager Api Version."
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Get information about all key vaults in the subscription.",
            "schema": {
              "$ref": "#/definitions/ResourceListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/secrets/{secretName}": {
      "put": {
        "tags": [
          "Secrets"
        ],
        "operationId": "Secrets_CreateOrUpdate",
        "description": "Create or update a secret in a key vault in the specified subscription.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the Resource Group to which the vault belongs."
          },
          {
            "name": "vaultName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "description": "Name of the vault"
          },
          {
            "name": "secretName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{1,127}$",
            "description": "Name of the secret"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretCreateOrUpdateParameters"
            },
            "description": "Parameters to create or update the secret"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Created or updated vault",
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          "200": {
            "description": "Created or updated secret",
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          }
        }
      },
      "patch": {
        "tags": [
          "Secrets"
        ],
        "operationId": "Secrets_Patch",
        "description": "Patch a secret in the specified subscription.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the Resource Group to which the vault belongs."
          },
          {
            "name": "vaultName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{3,24}$",
            "description": "Name of the vault"
          },
          {
            "name": "secretName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{1,127}$",
            "description": "Name of the secret"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SecretPatchParameters"
            },
            "description": "Parameters to patch the secret"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "201": {
            "description": "Patched secret",
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          },
          "200": {
            "description": "Patched secret",
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Secrets"
        ],
        "operationId": "Secrets_Delete",
        "description": "Deletes the specified secret.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the Resource Group to which the vault belongs."
          },
          {
            "name": "vaultName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the vault."
          },
          {
            "name": "secretName",
            "in": "path",
            "required": true,
            "type": "string",
            "pattern": "^[a-zA-Z0-9-]{1,127}$",
            "description": "Name of the secret to delete."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK Response."
          }
        }
      },
      "get": {
        "tags": [
          "Secrets"
        ],
        "operationId": "Secrets_Get",
        "description": "Gets the specified secret.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the Resource Group to which the vault belongs."
          },
          {
            "name": "vaultName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the vault."
          },
          {
            "name": "secretName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the secret."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved secret",
            "schema": {
              "$ref": "#/definitions/Secret"
            }
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.KeyVault/vaults/{vaultName}/secrets": {
      "get": {
        "tags": [
          "Secrets"
        ],
        "operationId": "Secrets_List",
        "description": "The List operation gets information about the secrets in a vault.",
        "parameters": [
          {
            "name": "resourceGroupName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the Resource Group to which the vault belongs."
          },
          {
            "name": "vaultName",
            "in": "path",
            "required": true,
            "type": "string",
            "description": "The name of the vault."
          },
          {
            "name": "$top",
            "in": "query",
            "type": "integer",
            "format": "int32",
            "description": "Maximum number of results to return."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Get information about secrets in the specified vault.",
            "schema": {
              "$ref": "#/definitions/SecretListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.KeyVault/checkNameAvailability": {
      "post": {
        "tags": [
          "Vaults"
        ],
        "operationId": "Vaults_CheckNameAvailability",
        "description": "Checks that the vault name is valid and is not already in use.",
        "parameters": [
          {
            "name": "vaultName",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VaultCheckNameAvailabilityParameters"
            },
            "description": "The name of the vault."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- Operation to check the vault name availability was successful.",
            "schema": {
              "$ref": "#/definitions/CheckNameAvailabilityResult"
            }
          }
        }
      }
    },
    "/providers/Microsoft.KeyVault/operations": {
      "get": {
        "tags": [
          "Operations"
        ],
        "description": "Lists all of the available Key Vault Rest API operations.",
        "operationId": "Operations_List",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK. The request has succeeded.",
            "schema": {
              "$ref": "#/definitions/OperationListResult"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        }
      }
    }
  },
  "definitions": {
    "Sku": {
      "properties": {
        "family": {
          "type": "string",
          "description": "SKU family name",
          "enum": [ "A" ],
          "x-ms-enum": {
            "name": "SkuFamily",
            "modelAsString": true
          }
        },
        "name": {
          "type": "string",
          "description": "SKU name to specify whether the key vault is a standard vault or a premium vault.",
          "enum": [ "standard", "premium" ],
          "x-ms-enum": {
            "name": "SkuName",
            "modelAsString": false
          }
        }
      },
      "description": "SKU details",
      "required": [
        "name",
        "family"
      ]
    },
    "AccessPolicyEntry": {
      "properties": {
        "tenantId": {
          "type": "string",
          "format": "uuid",
          "description": "The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault."
        },
        "objectId": {
          "type": "string",
          "description": "The object ID of a user, service principal or security group in the Azure Active Directory tenant for the vault. The object ID must be unique for the list of access policies."
        },
        "applicationId": {
          "type": "string",
          "format": "uuid",
          "description": " Application ID of the client making request on behalf of a principal"
        },
        "permissions": {
          "$ref": "#/definitions/Permissions",
          "description": "Permissions the identity has for keys, secrets and certificates."
        }
      },
      "description": "An identity that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID.",
      "required": [
        "tenantId",
        "objectId",
        "permissions"
      ]
    },
    "Permissions": {
      "properties": {
        "keys": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [ "all", "encrypt", "decrypt", "wrapKey", "unwrapKey", "sign", "verify", "get", "list", "create", "update", "import", "delete", "backup", "restore", "recover", "purge" ],
            "x-ms-enum": {
              "name": "KeyPermissions",
              "modelAsString": true
            }
          },
          "description": "Permissions to keys"
        },
        "secrets": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [ "all", "get", "list", "set", "delete", "backup", "restore", "recover", "purge" ],
            "x-ms-enum": {
              "name": "SecretPermissions",
              "modelAsString": true
            }
          },
          "description": "Permissions to secrets"
        },
        "certificates": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [ "all", "get", "list", "delete", "create", "import", "update", "managecontacts", "getissuers", "listissuers", "setissuers", "deleteissuers", "manageissuers", "recover", "purge" ],
            "x-ms-enum": {
              "name": "CertificatePermissions",
              "modelAsString": true
            }
          },
          "description": "Permissions to certificates"
        }
      },
      "description": "Permissions the identity has for keys, secrets and certificates."
    },
    "VaultProperties": {
      "properties": {
        "vaultUri": {
          "type": "string",
          "description": "The URI of the vault for performing operations on keys and secrets."
        },
        "tenantId": {
          "type": "string",
          "format": "uuid",
          "description": "The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault."
        },
        "sku": {
          "$ref": "#/definitions/Sku",
          "description": "SKU details"
        },
        "accessPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccessPolicyEntry"
          },
          "maxItems": 16,
          "description": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID."
        },
        "enabledForDeployment": {
          "type": "boolean",
          "description": "Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
        },
        "enabledForDiskEncryption": {
          "type": "boolean",
          "description": "Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
        },
        "enabledForTemplateDeployment": {
          "type": "boolean",
          "description": "Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
        },
        "enableSoftDelete": {
          "type": "boolean",
          "description": "Property to specify whether the 'soft delete' functionality is enabled for this key vault."
        }
      },
      "required": [
        "tenantId",
        "sku",
        "accessPolicies"
      ],
      "description": "Properties of the vault"
    },
    "VaultPatchProperties": {
      "properties": {
        "tenantId": {
          "type": "string",
          "format": "uuid",
          "description": "The Azure Active Directory tenant ID that should be used for authenticating requests to the key vault."
        },
        "sku": {
          "$ref": "#/definitions/Sku",
          "description": "SKU details"
        },
        "accessPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccessPolicyEntry"
          },
          "maxItems": 16,
          "description": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID."
        },
        "enabledForDeployment": {
          "type": "boolean",
          "description": "Property to specify whether Azure Virtual Machines are permitted to retrieve certificates stored as secrets from the key vault."
        },
        "enabledForDiskEncryption": {
          "type": "boolean",
          "description": "Property to specify whether Azure Disk Encryption is permitted to retrieve secrets from the vault and unwrap keys."
        },
        "enabledForTemplateDeployment": {
          "type": "boolean",
          "description": "Property to specify whether Azure Resource Manager is permitted to retrieve secrets from the key vault."
        },
        "enableSoftDelete": {
          "type": "boolean",
          "description": "Property to specify whether the 'soft delete' functionality is enabled for this key vault."
        }
      },
      "description": "Properties of the vault"
    },
    "VaultAccessPolicyProperties": {
      "properties": {
        "accessPolicies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AccessPolicyEntry"
          },
          "maxItems": 16,
          "description": "An array of 0 to 16 identities that have access to the key vault. All identities in the array must use the same tenant ID as the key vault's tenant ID."
        }
      },
      "required": [
        "accessPolicies"
      ],
      "description": "Properties of the vault access policy"
    },
    "VaultCreateOrUpdateParameters": {
      "properties": {
        "location": {
          "type": "string",
          "description": "The supported Azure location where the key vault should be created."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The tags that will be assigned to the key vault. "
        },
        "properties": {
          "$ref": "#/definitions/VaultProperties",
          "description": "Properties of the vault"
        }
      },
      "description": "Parameters for creating or updating a vault",
      "required": [
        "location",
        "properties"
      ],
      "x-ms-azure-resource": true
    },
    "VaultPatchParameters": {
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The tags that will be assigned to the key vault. "
        },
        "properties": {
          "$ref": "#/definitions/VaultPatchProperties",
          "description": "Properties of the vault"
        }
      },
      "description": "Parameters for creating or updating a vault",
      "x-ms-azure-resource": true
    },
    "VaultAccessPolicyParameters": {
      "properties": {
        "properties": {
          "$ref": "#/definitions/VaultAccessPolicyProperties",
          "description": "Properties of the vault"
        }
      },
      "description": "Parameters for updating the access policy in a vault",
      "required": [
        "properties"
      ],
      "x-ms-azure-resource": true
    },
    "Vault": {
      "properties": {
        "properties": {
          "$ref": "#/definitions/VaultProperties",
          "description": "Properties of the vault"
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "Resource information with extended details."
    },
    "VaultListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Vault"
          },
          "description": "Gets or sets the list of vaults."
        },
        "nextLink": {
          "type": "string",
          "description": "Gets or sets the URL to get the next set of vaults."
        }
      },
      "description": "List of vaults"
    },
    "ResourceListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Resource"
          },
          "description": "Gets the list of vault resources."
        },
        "nextLink": {
          "type": "string",
          "description": "Gets the URL to get the next set of vault resources."
        }
      },
      "description": "List of vault resources."
    },
    "Resource": {
      "properties": {
        "id": {
          "readOnly": true,
          "type": "string",
          "description": "The Azure Resource Manager resource ID for the key vault."
        },
        "name": {
          "type": "string",
          "description": "The name of the key vault."
        },
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "The resource type of the key vault."
        },
        "location": {
          "type": "string",
          "description": "The supported Azure location where the key vault should be created."
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The tags that will be assigned to the key vault. "
        }
      },
      "description": "Key Vault resource",
      "required": [
        "location",
        "name"
      ],
      "x-ms-azure-resource": true
    },
    "SecretProperties": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the secret."
        },
        "contentType": {
          "type": "string",
          "description": "The content type of the secret."
        },
        "attributes": {
          "$ref": "#/definitions/SecretAttributes",
          "description": "The attributes of the secret."
        },
        "secretUri": {
          "type": "string",
          "description": "The URI to retrieve the current version of the secret."
        },
        "secretUriWithVersion": {
          "type": "string",
          "description": "The URI to retrieve the specific version of the secret."
        }
      },
      "required": [
        "value"
      ],
      "description": "Properties of the secret"
    },
    "SecretPatchProperties": {
      "properties": {
        "value": {
          "type": "string",
          "description": "The value of the secret."
        },
        "contentType": {
          "type": "string",
          "description": "The content type of the secret."
        },
        "attributes": {
          "$ref": "#/definitions/SecretAttributes",
          "description": "The attributes of the secret."
        },
        "secretUri": {
          "type": "string",
          "description": "The URI to retrieve the current version of the secret."
        },
        "secretUriWithVersion": {
          "type": "string",
          "description": "The URI to retrieve the specific version of the secret."
        }
      },
      "description": "Properties of the secret"
    },
    "Attributes": {
      "properties": {
        "enabled": {
          "type": "boolean",
          "description": "Determines whether the object is enabled."
        },
        "nbf": {
          "x-ms-client-name": "NotBefore",
          "type": "integer",
          "format": "unixtime",
          "description": "Not before date in UTC."
        },
        "exp": {
          "x-ms-client-name": "Expires",
          "type": "integer",
          "format": "unixtime",
          "description": "Expiry date in UTC."
        },
        "created": {
          "type": "integer",
          "format": "unixtime",
          "readOnly": true,
          "description": "Creation time in UTC."
        },
        "updated": {
          "type": "integer",
          "format": "unixtime",
          "readOnly": true,
          "description": "Last updated time in UTC."
        }
      },
      "description": "The object attributes managed by the KeyVault service."
    },
    "SecretAttributes": {
      "allOf": [
        {
          "$ref": "#/definitions/Attributes"
        }
      ],
      "description": "The secret management attributes."
    },
    "SecretCreateOrUpdateParameters": {
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The tags that will be assigned to the secret. "
        },
        "properties": {
          "$ref": "#/definitions/SecretProperties",
          "description": "Properties of the secret"
        }
      },
      "description": "Parameters for creating or updating a secret",
      "required": [
        "properties"
      ],
      "x-ms-azure-resource": true
    },
    "SecretPatchParameters": {
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "The tags that will be assigned to the secret. "
        },
        "properties": {
          "$ref": "#/definitions/SecretPatchProperties",
          "description": "Properties of the secret"
        }
      },
      "description": "Parameters for patching a secret",
      "x-ms-azure-resource": true
    },
    "Secret": {
      "properties": {
        "properties": {
          "$ref": "#/definitions/SecretProperties",
          "description": "Properties of the secret"
        }
      },
      "required": [
        "properties"
      ],
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ],
      "description": "Resource information with extended details."
    },
    "SecretListResult": {
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Secret"
          },
          "description": "Gets or sets the list of secrets."
        },
        "nextLink": {
          "type": "string",
          "description": "Gets or sets the URL to get the next set of secrets."
        }
      },
      "description": "List of secrets"
    },
    "VaultCheckNameAvailabilityParameters": {
      "properties": {
        "name": {
          "type": "string",
          "description": "The vault name."
        },
        "type": {
          "type": "string",
          "enum": [ "Microsoft.KeyVault/vaults" ],
          "x-ms-enum": {
            "name": "Type",
            "modelAsString": false
          },
          "description": "The type of resource, Microsoft.KeyVault/vaults"
        }
      },
      "required": [
        "name",
        "type"
      ],
      "description": "The parameters used to check the availabity of the vault name."
    },
    "CheckNameAvailabilityResult": {
      "properties": {
        "nameAvailable": {
          "readOnly": true,
          "type": "boolean",
          "description": "Gets a boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken or is invalid and cannot be used."
        },
        "reason": {
          "readOnly": true,
          "type": "string",
          "description": "Gets the reason that a vault name could not be used. The Reason element is only returned if NameAvailable is false.",
          "enum": [
            "AccountNameInvalid",
            "AlreadyExists"
          ],
          "x-ms-enum": {
            "name": "Reason",
            "modelAsString": false
          }
        },
        "message": {
          "readOnly": true,
          "type": "string",
          "description": "Gets an error message explaining the Reason value in more detail."
        }
      },
      "description": "The CheckNameAvailability operation response."
    },
    "OperationListResult": {
     "description": "Result of the request to list Storage operations. It contains a list of operations and a URL link to get the next set of results.",
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Operation"
          },
          "description": "List of Storage operations supported by the Storage resource provider."
        }
      }
    },
    "Operation": {
      "description": "Key Vault REST API operation definition.",
      "type": "object",
      "properties": {
        "name": {
          "description": "Operation name: {provider}/{resource}/{operation}",
          "type": "string"
        },
        "display": {
          "description": "Display metadata associated with the operation.",
          "properties": {
            "provider": {
              "description": "Service provider: Microsoft Key Vault.",
              "type": "string"
            },
            "resource": {
              "description": "Resource on which the operation is performed etc.",
              "type": "string"
            },
            "operation": {
              "description": "Type of operation: get, read, delete, etc.",
              "type": "string"
            },
            "description": {
              "description": "Decription of operation.",
              "type": "string"
            }
          }
        },
        "origin": {
          "type" : "string",
          "description": "The origin of operations."
        },
        "properties": {
          "description": "Properties of operation, include metric specifications.",
          "x-ms-client-flatten": true,
          "x-ms-client-name": "OperationProperties",
          "$ref" : "#/definitions/OperationProperties"
        }
      }
    },
    "OperationProperties":
    {
      "description": "Properties of operation, include metric specifications.",
      "properties": {
        "serviceSpecification": {
          "$ref" : "#/definitions/ServiceSpecification",
          "description": "One property of operation, include metric specifications."
        }
      }
    },
    "ServiceSpecification":
    {
      "description": "One property of operation, include log specifications.",
      "properties": {
        "logSpecifications":
        {
          "description": "Log specifications of operation.",
          "type":"array",
          "items": {
            "$ref" : "#/definitions/LogSpecification"
          }
        }
      }
    },
    "LogSpecification": {
      "description": "Log specification of operation.",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of log specification."
        },
        "displayName":
        {
          "type": "string",
          "description": "Display name of log specification."
        },
        "blobDuration": {
          "type": "string",
          "description": "Blob duration of specification."
        }
      }
    }
  },
  "parameters": {
    "SubscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "Gets subscription credentials which uniquely identify Microsoft Azure subscription. The subscription ID forms part of the URI for every service call."
    },
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "Client Api Version."
    }
  }
}